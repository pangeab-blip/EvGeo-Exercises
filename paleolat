{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM4Ul4aZGHdyBA6tUW2vphh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "fe0963403a9d480f814a903056382e8e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ebe510c33a3e4a41a4890b0a824f2f35",
              "IPY_MODEL_f60d5c9b6ecf4d5fa2f863bcd7e3fde6",
              "IPY_MODEL_2704451b17eb43aab936cad61fb09f5c",
              "IPY_MODEL_c221b6bd75074e85af4d8c74512e8472"
            ],
            "layout": "IPY_MODEL_3b0586782be94a36b617fe4e4836ac9b"
          }
        },
        "ebe510c33a3e4a41a4890b0a824f2f35": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ToggleButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ToggleButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ToggleButtonView",
            "button_style": "",
            "description": "Show data with error bars",
            "description_tooltip": null,
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_1f5f3e894a8948d292f28efbf65f1260",
            "style": "IPY_MODEL_a9c3b4efe2ee455fb6afdede39624f55",
            "tooltip": "",
            "value": true
          }
        },
        "f60d5c9b6ecf4d5fa2f863bcd7e3fde6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "BoundedIntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "BoundedIntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "N_BOOT:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_f0576a2982874d529acf9f9fa3195030",
            "max": 20000,
            "min": 100,
            "step": 100,
            "style": "IPY_MODEL_90fd30fa9d8f4193bb230697e787afca",
            "value": 1000
          }
        },
        "2704451b17eb43aab936cad61fb09f5c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Equal (all 1.0)",
              "Data-driven (age_err & alpha95)",
              "Custom (upload weights CSV)"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Weights:",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_8503f8b659cc421e806cf6c45e8569f6",
            "style": "IPY_MODEL_ec34d0b827b649c5b630c52b6aa54321"
          }
        },
        "c221b6bd75074e85af4d8c74512e8472": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "LOESS degree:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_7fd0b66dcdf349fd81f17ed641c00c2b",
            "style": "IPY_MODEL_10012c5d923d4270a06e037ee63c9283"
          }
        },
        "3b0586782be94a36b617fe4e4836ac9b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1f5f3e894a8948d292f28efbf65f1260": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a9c3b4efe2ee455fb6afdede39624f55": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f0576a2982874d529acf9f9fa3195030": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "90fd30fa9d8f4193bb230697e787afca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8503f8b659cc421e806cf6c45e8569f6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ec34d0b827b649c5b630c52b6aa54321": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7fd0b66dcdf349fd81f17ed641c00c2b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "10012c5d923d4270a06e037ee63c9283": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6852f2a1d9334b73bd082102729511b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2bb554f25f8e4f039fdba37444a2dc18",
              "IPY_MODEL_47d2868806d24b4ba2685aa31e05cfa9",
              "IPY_MODEL_5ad3953a6b4a48fdb3f89af03309ca20",
              "IPY_MODEL_a3870ec63dd041f3b6dbdb4f1eb7d154",
              "IPY_MODEL_56b1e9c51e57427d91e78e1178a63b44"
            ],
            "layout": "IPY_MODEL_f6b38a4debc6452a97d36ccaf5e9fc33"
          }
        },
        "2bb554f25f8e4f039fdba37444a2dc18": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Auto (CV)",
              "Manual"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Frac mode:",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_8e4c839c4ed149459a809163957664bd",
            "style": "IPY_MODEL_7ec3051b63654a6e9de8bd555d3076fa"
          }
        },
        "47d2868806d24b4ba2685aa31e05cfa9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "frac",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_1fda23d82e2d47bbbdca9e4883fda18e",
            "max": 0.85,
            "min": 0.15,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.05,
            "style": "IPY_MODEL_ae5f745c46b44afc9f78bbf9cc54fb68",
            "value": 0.4
          }
        },
        "5ad3953a6b4a48fdb3f89af03309ca20": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FileUploadModel",
          "model_module_version": "1.5.0",
          "state": {
            "_counter": 0,
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FileUploadModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FileUploadView",
            "accept": ".csv",
            "button_style": "",
            "data": [],
            "description": "Upload weights CSV",
            "description_tooltip": null,
            "disabled": false,
            "error": "",
            "icon": "upload",
            "layout": "IPY_MODEL_11edad66ef4a46f6b27a74f8f0b0eef7",
            "metadata": [],
            "multiple": false,
            "style": "IPY_MODEL_76fd12bc06f14060a22bc299f39788e3"
          }
        },
        "a3870ec63dd041f3b6dbdb4f1eb7d154": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Run analysis",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_6539a745f5a34a3f862cef7d9e71f86c",
            "style": "IPY_MODEL_be010fff6c5a4943af98fb757e394016",
            "tooltip": ""
          }
        },
        "56b1e9c51e57427d91e78e1178a63b44": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "warning",
            "description": "Reset",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_028af83192844f33891186d9771d3cc3",
            "style": "IPY_MODEL_a3eaa1535d17434a97ed34b7ce8ee92f",
            "tooltip": ""
          }
        },
        "f6b38a4debc6452a97d36ccaf5e9fc33": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8e4c839c4ed149459a809163957664bd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7ec3051b63654a6e9de8bd555d3076fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1fda23d82e2d47bbbdca9e4883fda18e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "flex",
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae5f745c46b44afc9f78bbf9cc54fb68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "11edad66ef4a46f6b27a74f8f0b0eef7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "76fd12bc06f14060a22bc299f39788e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "6539a745f5a34a3f862cef7d9e71f86c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "be010fff6c5a4943af98fb757e394016": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "028af83192844f33891186d9771d3cc3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a3eaa1535d17434a97ed34b7ce8ee92f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "551359b2a0094ee4bad8bb6432e258b0": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_5191da3601c040b297f0bd34c1cb71c9",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 800x500 with 1 Axes>",
                  "image/png": "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LcLLywszMzPq169fZUHKO++8w4cffkhSUlKVlCeEEEKIyrkTUNy5l4quN5yzT27TvU713MrrtstYGNsWACMDFa919ytXQOFua0Z954croAAJKh5YvXr1IjIykvDwcHbs2EGXLl2YMmUKffv2JTc3t6arB4CXlxcHDx4sMc+YMWN49tlnq/S4X331FW3btsXT07NS5fzxxx9Mnz6dadOmERQUxNdff42jo2OV1LFhw4b4+Pjw3XffVUl5QgghhKi4rFwNQZHJZOXoP5zNMXcizb4hafYNibUK4N2/jNgS5cBtaqE2NGD6E/Vp6WVXpmMYqMDXyZI69ublmhXqQSFBRXmkRMGB+YUHZl/cBj+Nyfv+pzF578uyXyWYmJjg4uKCu7s7zZs356233uLXX39lx44drF27Vpfv008/pVGjRlhYWODh4cH48eNJTU0F4ODBg4wePZqkpCRdy8esWbMAWL9+PS1atMDKygoXFxeGDx9OTExMETWpuGXLljFhwgTq1q1bbJ7FixdTt25djIyMdHVUqVR07ty52H02btxIv379dO9v376Ni4sL8+bN06UdO3YMtVrNvn37ii3HwMAAQ0NDxo4di5eXF+3bt+epp54q9bzGjBlD37599dJycnJwcnLi66+/1qX169ePjRs3llqeEEIIIapPdq6WoMgUMnOK7+2RmpXLvB1BXIxMBsDM2JAZvf1p4mFbpmOojVQ0cLPG0cqkKqp8X5KgojxSovIGZRcMDi5ug00vQPzVvPfxV/PeFwwsitqvGnTt2pUmTZqwZcsWXZqBgQHLli3jwoULrFu3jv379/PGG28A0LZtW5YsWYK1tTWRkZFERkYyffp0IO8m+IMPPuDMmTNs3bqV8PBwRo0aVa31v9uePXt4/fXXeemllwgKCuK7777DwsKCIUOGFNu1KT4+nosXL9KiRQtdmqOjI9988w2zZs3i5MmTpKSk8MILLzBx4kS6detW7PGbNm2Ku7s748ePL1e3snHjxrFz504iI+9ML7d9+3bS09P1WmUef/xx/vrrL7KysspcthBCCCGqTo5GS1BkMhnZmmLzJGXkMHf7RUJj8h7KWpgY8nafAAJcrct0DEsTIxq622Bl+uDP8FQSGahdEbGX73y/dxZ5Y/7zF0JR8t7vnQW2dQrnr2b+/v6cPXtW9/61117Tfe/l5cXcuXN55ZVX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RMPfkJ0NfPLkSdTW1mLu3LnRbSaTCTNnzsS2bdsGsWV9I5dJyLVoMSXXjDSjhoGCiIiIiEaMITtRu7a2FgCQnp4esz09PT26Lx6fzwefzxd97HA4BqaBvVScbYoWsSMiIiIiGklG3F3uihUrYDKZol+5ubmD3SQAYKAgIiIiohFryN7pZmRkAADq6upittfV1UX3xbN8+XLY7fboV1VV1YC2k4iIiIjoUjdkQ8Xo0aORkZGB9evXR7c5HA7s2LEDpaWlXT5PrVbDaDTGfBERERER0cAZ1DkVTqcTx44diz4+efIkysrKYLFYkJeXh8WLF+OXv/wlCgsLMXr0aPz0pz9FVlYWbr755sFrNBERERERxRjUULFr1y588YtfjD5eunQpAODee+/FK6+8gh/+8IdwuVx48MEHYbPZcNVVV+GDDz6ARqMZrCYTEREREVEHkhBCDHYjBpLD4YDJZILdbh++Q6HOlgEvXg08uAnImjzYrSEiIiKiS0RP76WH7JwKIiIiIiIaHhgqiIiIiIioXxgqiIiIiIioXxgqiIiIiIioXxgqiIiIiIioXxgqiIiIiIioXxgqiIiIiIioXwa1+B11o7U28tV4NPK4/bshI/JFRERERDQEMFQMZbvWAJtWnnv8zgOR71c/Cnxx+eC0iYiIiIioA4aKoWz6fUDRgs7b2UtBREREREMIQ8VQxmFORERERDQMcKI2ERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1C0MFERERERH1i2KwGzDQhBAAAIfDMcgtISIiIiIaXtrvodvvqbsy4kNFa2srACA3N3eQW0JERERENDy1trbCZDJ1uV8S3cWOYS4cDuPs2bMwGAyQJOmCxzocDuTm5qKqqgpGo/EitXDk4vVMPF7TxOL1TCxez8Ti9UwsXs/E4zVNrKF6PYUQaG1tRVZWFmSyrmdOjPieCplMhpycnF49x2g0Dqn/mMMdr2fi8ZomFq9nYvF6JhavZ2LxeiYer2liDcXreaEeinacqE1ERERERP3CUEFERERERP3CUHEetVqNxx9/HGq1erCbMiLweiYer2li8XomFq9nYvF6JhavZ+LxmibWcL+eI36iNhERERERDSz2VBARERERUb8wVBARERERUb8wVBARERERUb8wVJzn+eefx6hRo6DRaDBz5kx89tlng92kIWfFihW44oorYDAYkJaWhptvvhnl5eUxx1xzzTWQJCnm6zvf+U7MMZWVlfjKV74CnU6HtLQ0/OAHP0AwGLyYb2XI+NnPftbpeo0fPz663+v1YuHChUhJSYFer8ett96Kurq6mHPwep4zatSoTtdTkiQsXLgQAD+f3dm8eTNuuOEGZGVlQZIkrF27Nma/EAKPPfYYMjMzodVqMXfuXFRUVMQc09zcjLvuugtGoxFmsxn3338/nE5nzDH79+/H7NmzodFokJubiyeffHKg39qguND1DAQCWLZsGSZNmoSkpCRkZWXhnnvuwdmzZ2POEe8zvXLlyphjeD0jvvnNb3a6VvPnz485hp/PWN1d03g/TyVJwlNPPRU9hp/RiJ7cIyXqd/rGjRsxdepUqNVqjB07Fq+88spAv73uCRJCCPHmm28KlUol/vSnP4nPP/9cPPDAA8JsNou6urrBbtqQMm/ePLFmzRpx8OBBUVZWJr785S+LvLw84XQ6o8dcffXV4oEHHhA1NTXRL7vdHt0fDAbFxIkTxdy5c8XevXvF+++/L6xWq1i+fPlgvKVB9/jjj4sJEybEXK+Ghobo/u985zsiNzdXrF+/XuzatUvMmjVLfOELX4ju5/WMVV9fH3MtP/zwQwFAbNiwQQjBz2d33n//ffHjH/9YvPPOOwKAePfdd2P2r1y5UphMJrF27Vqxb98+ceONN4rRo0cLj8cTPWb+/PmipKREbN++XXzyySdi7Nix4o477ojut9vtIj09Xdx1113i4MGD4i9/+YvQarXihRdeuFhv86K50PW02Wxi7ty54q233hJHjhwR27ZtEzNmzBDTpk2LOUd+fr74+c9/HvOZPf9nLq/nOffee6+YP39+zLVqbm6OOYafz1jdXdPzr2VNTY3405/+JCRJEsePH48ew89oRE/ukRLxO/3EiRNCp9OJpUuXikOHDonnnntOyOVy8cEHH1zU99sRQ0WbGTNmiIULF0Yfh0IhkZWVJVasWDGIrRr66uvrBQCxadOm6Larr75aPPLII10+5/333xcymUzU1tZGt61evVoYjUbh8/kGsrlD0uOPPy5K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vPTSS8jKykI4HMbEiRPh9/t79Hyn04kbbrgBv/nNbzrty8zMTHRziYionxgqiIgooZqamlBeXo6XXnoJs2fPBgB8+umn0f1FRUV47bXX4PP5oFarAQA7d+6MOcfUqVPxv//7vxg1ahQUCv6qIiIa6jj8iYiIEio5ORkpKSl48cUXcezYMXz88cdYunRpdP+dd96JcDiMBx98EIcPH8a6devw//7f/wMASJIEAFi4cCGam5txxx13YOfOnTh+/DjWrVuH++67D6FQaFDeFxERdY2hgoiIEkomk+HNN9/E7t27MXHiRCxZsgRPPfVUdL/RaMTf/vY3lJWVYfLkyfjxj3+Mxx57DACi8yyysrKwZcsWhEIhXH/99Zg0aRIWL14Ms9kMmYy/uoiIhhqu/kRERIPu9ddfx3333Qe73Q6tVjvYzSEiol7iQFUiIrroXn31VRQUFCA7Oxv79u3DsmXLcNtttzFQEBENUwwVRER00dXW1uKxxx5DbW0tMjMz8fWvfx2/+tWvBrtZRETURxz+RERERERE/cLZbkRERERE1C8MFURERERE1C8MFURERERE1C8MFURERERE1C8MFURERERE1C8MFURERERE1C8MFURERERE1C8MFURERERE1C8MFURERERE1C//HwrwUWgYa9Z7AAAAAElFTkSuQmCC\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "5191da3601c040b297f0bd34c1cb71c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5ba87295b0a74189afb50ac5a4de592f": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_2284a145069543e2869de6be334f9bb0",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "Analysis completed. Use the buttons below to download outputs on demand.\n"
                ]
              }
            ]
          }
        },
        "2284a145069543e2869de6be334f9bb0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "264cb49358044c5cb95f8986ca9e461d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4f3fffd69a11451196b874e0b4c5f8fe",
              "IPY_MODEL_8524c26f09fb4713947e46c8051db443",
              "IPY_MODEL_2775ecf1114a49e3875d486cd33b9f57",
              "IPY_MODEL_f8a9c8da0f354ecbad65d2fa69f962f5",
              "IPY_MODEL_0c13847f90d448d495bea17ae3cabcfb"
            ],
            "layout": "IPY_MODEL_fe958b27dd854613b9e2410f933a50af"
          }
        },
        "4f3fffd69a11451196b874e0b4c5f8fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Download summary CSV",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_ac1a396ff22746e781e2b47d8cd6d03f",
            "style": "IPY_MODEL_0301af4d7c344a879699e060d0b38e30",
            "tooltip": ""
          }
        },
        "8524c26f09fb4713947e46c8051db443": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Download curves CSV",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_a2757e0966524406a0013369d5b4d41f",
            "style": "IPY_MODEL_3cac7932220d443e8bb86f04c0e02460",
            "tooltip": ""
          }
        },
        "2775ecf1114a49e3875d486cd33b9f57": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Download metadata JSON",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_eab969e7bdd144d487b75ed47ced00e5",
            "style": "IPY_MODEL_a8532681cffa434fb8279109f4e0d0ab",
            "tooltip": ""
          }
        },
        "f8a9c8da0f354ecbad65d2fa69f962f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Download PDF report",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_6d9aad73b4d24032bd88de8dae6020a6",
            "style": "IPY_MODEL_7d7dc3f19c564eafb1259d60f94693aa",
            "tooltip": ""
          }
        },
        "0c13847f90d448d495bea17ae3cabcfb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Download plot PNG",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_52eb6bc004664cd29bb48c8a0aca2630",
            "style": "IPY_MODEL_bed20cb8af0249368ff0b07203e62c55",
            "tooltip": ""
          }
        },
        "fe958b27dd854613b9e2410f933a50af": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ac1a396ff22746e781e2b47d8cd6d03f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0301af4d7c344a879699e060d0b38e30": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "a2757e0966524406a0013369d5b4d41f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3cac7932220d443e8bb86f04c0e02460": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "eab969e7bdd144d487b75ed47ced00e5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8532681cffa434fb8279109f4e0d0ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "6d9aad73b4d24032bd88de8dae6020a6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7d7dc3f19c564eafb1259d60f94693aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "52eb6bc004664cd29bb48c8a0aca2630": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bed20cb8af0249368ff0b07203e62c55": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pangeab-blip/EvGeo-Exercises/blob/main/paleolat\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "# Colab — LOESS bootstrap (English I/O) with:\n",
        "# - CSV input: age, age_err, paleolatitude, paleolatitude_err (alpha95)\n",
        "# - Weighting modes: Equal / Data-driven (age_err & alpha95) / Custom (upload weights CSV with 'weight')\n",
        "# - LOESS degree: 1 (linear) or 2 (quadratic)\n",
        "# - Smoothing fraction (frac): Auto (CV) or Manual (e.g., 0.20, 0.30, 0.40)\n",
        "# - Toggle raw points with error bars; numeric control for N_BOOT\n",
        "# - PCHIP mapping to a common age grid\n",
        "# - ONLY Simultaneous 95% band\n",
        "# - On-demand downloads (no auto-downloads)\n",
        "# - Reset clears state and removes the previous plot; every run shows a fresh plot\n",
        "#\n",
        "# If needed, ensure packages:\n",
        "# !pip -q install statsmodels ipywidgets scikit-misc\n",
        "\n",
        "import io, json\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.model_selection import KFold\n",
        "from scipy.interpolate import PchipInterpolator\n",
        "from matplotlib.backends.backend_pdf import PdfPages\n",
        "from IPython.display import display, clear_output\n",
        "import ipywidgets as widgets\n",
        "from google.colab import files\n",
        "\n",
        "USE_SKMISC = True\n",
        "try:\n",
        "    from skmisc.loess import loess as SK_LOESS\n",
        "except Exception:\n",
        "    USE_SKMISC = False\n",
        "from statsmodels.nonparametric.smoothers_lowess import lowess as SM_LOWESS\n",
        "\n",
        "print(\"Please upload a CSV with columns: age, age_err, paleolatitude, paleolatitude_err (alpha95).\")\n",
        "uploaded = files.upload()\n",
        "filename = list(uploaded.keys())[0]\n",
        "df = pd.read_csv(io.BytesIO(uploaded[filename]))\n",
        "print(f\"\\nLoaded file: {filename}\")\n",
        "display(df.head())\n",
        "\n",
        "required = {\"age\",\"age_err\",\"paleolatitude\",\"paleolatitude_err\"}\n",
        "missing = required - set(df.columns)\n",
        "if missing:\n",
        "    raise ValueError(f\"Missing required columns: {missing}\")\n",
        "if (df[\"age_err\"] < 0).any() or (df[\"paleolatitude_err\"] < 0).any():\n",
        "    raise ValueError(\"Uncertainties must be non-negative.\")\n",
        "if len(df) < 3:\n",
        "    raise ValueError(\"At least three observations are required for LOESS.\")\n",
        "\n",
        "df = df.copy()\n",
        "for c in [\"age\",\"age_err\",\"paleolatitude\",\"paleolatitude_err\"]:\n",
        "    df[c] = pd.to_numeric(df[c], errors=\"coerce\")\n",
        "df = df.dropna(subset=[\"age\",\"age_err\",\"paleolatitude\",\"paleolatitude_err\"])\n",
        "df = df.sort_values(\"age\").reset_index(drop=True)\n",
        "\n",
        "toggle_errors = widgets.ToggleButton(value=True, description=\"Show data with error bars\")\n",
        "nboot_input = widgets.BoundedIntText(value=1000, min=100, max=20000, step=100, description=\"N_BOOT:\")\n",
        "\n",
        "weight_mode = widgets.Dropdown(\n",
        "    options=[\"Equal (all 1.0)\", \"Data-driven (age_err & alpha95)\", \"Custom (upload weights CSV)\"],\n",
        "    value=\"Equal (all 1.0)\",\n",
        "    description=\"Weights:\"\n",
        ")\n",
        "upload_weights_btn = widgets.FileUpload(accept=\".csv\", multiple=False, description=\"Upload weights CSV\")\n",
        "\n",
        "loess_degree = widgets.Dropdown(options=[1, 2], value=1, description=\"LOESS degree:\")\n",
        "\n",
        "frac_mode = widgets.Dropdown(options=[\"Auto (CV)\", \"Manual\"], value=\"Auto (CV)\", description=\"Frac mode:\")\n",
        "frac_value = widgets.FloatSlider(value=0.40, min=0.15, max=0.85, step=0.05, description=\"frac\", readout_format=\".2f\")\n",
        "\n",
        "def _toggle_frac_visibility(change=None):\n",
        "    frac_value.layout.display = \"none\" if frac_mode.value == \"Auto (CV)\" else \"flex\"\n",
        "_toggle_frac_visibility()\n",
        "frac_mode.observe(lambda ch: _toggle_frac_visibility(), names=\"value\")\n",
        "\n",
        "run_button = widgets.Button(description=\"Run analysis\", button_style=\"primary\")\n",
        "reset_button = widgets.Button(description=\"Reset\", button_style=\"warning\")\n",
        "\n",
        "plot_out = widgets.Output()\n",
        "status_out = widgets.Output()\n",
        "\n",
        "btn_dl_summary = widgets.Button(description=\"Download summary CSV\", disabled=True)\n",
        "btn_dl_curves  = widgets.Button(description=\"Download curves CSV\", disabled=True)\n",
        "btn_dl_meta    = widgets.Button(description=\"Download metadata JSON\", disabled=True)\n",
        "btn_dl_pdf     = widgets.Button(description=\"Download PDF report\", disabled=True)\n",
        "btn_dl_png     = widgets.Button(description=\"Download plot PNG\", disabled=True)\n",
        "\n",
        "row1 = widgets.HBox([toggle_errors, nboot_input, weight_mode, loess_degree])\n",
        "row2 = widgets.HBox([frac_mode, frac_value, upload_weights_btn, run_button, reset_button])\n",
        "downloads_box = widgets.HBox([btn_dl_summary, btn_dl_curves, btn_dl_meta, btn_dl_pdf, btn_dl_png])\n",
        "\n",
        "display(row1, row2, plot_out, status_out, downloads_box)\n",
        "\n",
        "LOESS_IT = 1\n",
        "GRID_SIZE = 300\n",
        "RNG_SEED = 42\n",
        "FRAC_GRID = np.linspace(0.20, 0.80, 13)\n",
        "K_FOLDS = 5\n",
        "RANDOM_STATE_CV = 123\n",
        "SAVE_FIG = True\n",
        "EXPORT_ALL_CURVES = True\n",
        "\n",
        "age_min = float(df[\"age\"].min()); age_max = float(df[\"age\"].max())\n",
        "age_grid = np.linspace(age_min, age_max, GRID_SIZE)\n",
        "\n",
        "summary_path = curves_path = meta_path = pdf_path = png_path = None\n",
        "\n",
        "def cv_select_frac(x, y, frac_values, k_folds=5, it=1, random_state=0):\n",
        "    if len(x) < max(k_folds,5): return None\n",
        "    kf = KFold(n_splits=k_folds, shuffle=True, random_state=random_state)\n",
        "    rmse_mean = []\n",
        "    for frac in frac_values:\n",
        "        errs = []\n",
        "        for tr, te in kf.split(x):\n",
        "            xt, yt = x[tr], y[tr]; xv, yv = x[te], y[te]\n",
        "            if xt.size < 3 or np.unique(xt).size < 3: continue\n",
        "            ys_t = SM_LOWESS(yt, xt, frac=frac, it=it, return_sorted=False)\n",
        "            ordt = np.argsort(xt)\n",
        "            pchip = PchipInterpolator(xt[ordt], ys_t[ordt], extrapolate=True)\n",
        "            yhat = pchip(xv)\n",
        "            errs.append(float(np.sqrt(np.mean((yv - yhat)**2))))\n",
        "        rmse_mean.append(np.inf if not errs else np.mean(errs))\n",
        "    return float(frac_values[int(np.argmin(rmse_mean))])\n",
        "\n",
        "def preliminary_slope(x, y, frac):\n",
        "    ys = SM_LOWESS(y, x, frac=frac, it=LOESS_IT, return_sorted=False)\n",
        "    order = np.argsort(x); xs = x[order]; ys_s = ys[order]\n",
        "    slope = np.empty_like(xs)\n",
        "    slope[1:-1] = (ys_s[2:] - ys_s[:-2]) / (xs[2:] - xs[:-2])\n",
        "    slope[0]  = (ys_s[1] - ys_s[0])   / (xs[1] - xs[0])\n",
        "    slope[-1] = (ys_s[-1] - ys_s[-2]) / (xs[-1] - xs[-2])\n",
        "    inv = np.empty_like(order); inv[order] = np.arange(order.size)\n",
        "    return slope[inv]\n",
        "\n",
        "def build_weights(mode, custom_weights_file, x, sigma_x, alpha95, y_obs, frac_for_slope):\n",
        "    n = x.size\n",
        "    if mode.startswith(\"Equal\"):\n",
        "        return np.ones(n, dtype=float)\n",
        "    if mode.startswith(\"Custom\"):\n",
        "        if custom_weights_file is None:\n",
        "            raise ValueError(\"Custom weights mode selected but no weights CSV uploaded.\")\n",
        "        cwdf = pd.read_csv(io.BytesIO(custom_weights_file[next(iter(custom_weights_file))][\"content\"]))\n",
        "        if \"weight\" not in cwdf.columns:\n",
        "            raise ValueError(\"Custom weights CSV must contain a column named 'weight'.\")\n",
        "        w = cwdf[\"weight\"].astype(float).values\n",
        "        if w.size != n:\n",
        "            raise ValueError(f\"Custom weights length {w.size} differs from data length {n}.\")\n",
        "        return w\n",
        "    sigma_y = alpha95.astype(float) / 1.96\n",
        "    dy_dx = preliminary_slope(x, y_obs.astype(float), frac=frac_for_slope)\n",
        "    sigma_eff2 = sigma_y**2 + (dy_dx**2) * (sigma_x**2)\n",
        "    eps = 1e-12\n",
        "    w = 1.0 / np.maximum(sigma_eff2, eps)\n",
        "    w *= (len(w) / w.sum())\n",
        "    return w\n",
        "\n",
        "def loess_weighted_to_grid(x, y, w, grid, frac, degree):\n",
        "    if x.size < 3 or np.allclose(x, x[0]): return np.full_like(grid, np.nan, dtype=float)\n",
        "    if USE_SKMISC:\n",
        "        mdl = SK_LOESS(x, y, weights=w, span=float(frac), degree=int(degree), family=\"gaussian\", surface=\"direct\")\n",
        "        mdl.fit()\n",
        "        y_sm = mdl.predict(x, stderror=False).values\n",
        "    else:\n",
        "        y_sm = SM_LOWESS(y, x, frac=float(frac), it=LOESS_IT, return_sorted=False)\n",
        "    ord_idx = np.argsort(x); xs = x[ord_idx]; ys = y_sm[ord_idx]\n",
        "    pchip = PchipInterpolator(xs, ys, extrapolate=True)\n",
        "    return pchip(grid).astype(float)\n",
        "\n",
        "def _safe_download(path):\n",
        "    try: files.download(path)\n",
        "    except Exception as e:\n",
        "        with status_out: print(f\"Cannot download {path}:\", repr(e))\n",
        "\n",
        "def on_run_clicked(btn):\n",
        "    global summary_path, curves_path, meta_path, pdf_path, png_path\n",
        "    plt.close('all'); plot_out.clear_output(wait=True)\n",
        "    with status_out:\n",
        "        clear_output(wait=True)\n",
        "        print(\"Analysis started…\")\n",
        "        if not USE_SKMISC:\n",
        "            print(\"Note: scikit-misc not available. Fallback to unweighted, degree=1 LOESS.\")\n",
        "    btn.disabled = True\n",
        "    try:\n",
        "        show_errors = bool(toggle_errors.value)\n",
        "        N_BOOT = int(nboot_input.value)\n",
        "        mode = str(weight_mode.value)\n",
        "        degree = int(loess_degree.value)\n",
        "\n",
        "        x0 = df[\"age\"].values.astype(float)\n",
        "        y0 = df[\"paleolatitude\"].values.astype(float)\n",
        "        sx = df[\"age_err\"].values.astype(float)\n",
        "        a95 = df[\"paleolatitude_err\"].values.astype(float)\n",
        "\n",
        "        if frac_mode.value == \"Auto (CV)\":\n",
        "            frac_star = cv_select_frac(x0, y0, FRAC_GRID, k_folds=K_FOLDS, it=LOESS_IT, random_state=RANDOM_STATE_CV)\n",
        "            if frac_star is None or not np.isfinite(frac_star): frac_star = 0.4\n",
        "            frac_for_slope = frac_star\n",
        "            frac_source = \"auto_cv\"\n",
        "        else:\n",
        "            frac_star = float(frac_value.value)\n",
        "            frac_for_slope = frac_star\n",
        "            frac_source = \"manual\"\n",
        "\n",
        "        custom_file = upload_weights_btn.value if mode.startswith(\"Custom\") else None\n",
        "        w0 = build_weights(mode, custom_file, x0, sx, a95, y0, frac_for_slope)\n",
        "\n",
        "        with status_out:\n",
        "            print(f\"LOESS frac: {frac_star:.2f} ({'CV' if frac_source=='auto_cv' else 'manual'})\")\n",
        "            print(f\"Weighting mode: {mode}\")\n",
        "            print(f\"LOESS degree: {degree}\")\n",
        "            print(f\"Bootstrap replicas (N_BOOT): {N_BOOT}\")\n",
        "\n",
        "        rng = np.random.default_rng(RNG_SEED)\n",
        "        curves = np.empty((N_BOOT, age_grid.size), dtype=float)\n",
        "        for b in range(N_BOOT):\n",
        "            xb = rng.normal(loc=x0, scale=sx)\n",
        "            yb = rng.normal(loc=y0, scale=(a95/1.96))\n",
        "            curves[b, :] = loess_weighted_to_grid(xb, yb, w0, age_grid, frac=frac_star, degree=degree)\n",
        "\n",
        "        valid_mask = np.isfinite(curves).all(axis=1)\n",
        "        curves = curves[valid_mask]\n",
        "        if curves.shape[0] == 0:\n",
        "            raise RuntimeError(\"No valid replicas: check uncertainties or LOESS parameters.\")\n",
        "\n",
        "        mean_curve = np.nanmean(curves, axis=0)\n",
        "        median_curve = np.nanmedian(curves, axis=0)\n",
        "        std_curve = np.nanstd(curves, axis=0, ddof=1)\n",
        "\n",
        "        std_safe = np.maximum(std_curve, 1e-12)\n",
        "        Z = (curves - mean_curve[None, :]) / std_safe[None, :]\n",
        "        M = np.nanmax(np.abs(Z), axis=1)\n",
        "        c95 = float(np.nanpercentile(M, 95))\n",
        "        simul_lo = mean_curve - c95 * std_safe\n",
        "        simul_hi = mean_curve + c95 * std_safe\n",
        "\n",
        "        summary = pd.DataFrame({\n",
        "            \"age_grid\": age_grid,\n",
        "            \"loess_mean\": mean_curve,\n",
        "            \"loess_median\": median_curve,\n",
        "            \"loess_std\": std_curve,\n",
        "            \"simul95_lo\": simul_lo,\n",
        "            \"simul95_hi\": simul_hi,\n",
        "            \"n_replicas_valid\": curves.shape[0]\n",
        "        })\n",
        "        summary_path = \"loess_bootstrap_summary.csv\"\n",
        "        summary.to_csv(summary_path, index=False)\n",
        "\n",
        "        curves_path = None\n",
        "        if EXPORT_ALL_CURVES:\n",
        "            curves_df = pd.DataFrame(curves.T, columns=[f\"rep_{i+1:04d}\" for i in range(curves.shape[0])])\n",
        "            curves_df.insert(0, \"age_grid\", age_grid)\n",
        "            curves_path = \"loess_bootstrap_curves.csv\"\n",
        "            curves_df.to_csv(curves_path, index=False)\n",
        "\n",
        "        meta = {\n",
        "            \"input_file\": filename,\n",
        "            \"n_points\": int(len(df)),\n",
        "            \"n_boot\": int(N_BOOT),\n",
        "            \"n_boot_valid\": int(curves.shape[0]),\n",
        "            \"grid_size\": int(GRID_SIZE),\n",
        "            \"age_min\": float(age_min), \"age_max\": float(age_max),\n",
        "            \"loess\": {\"frac\": float(frac_star), \"frac_source\": frac_source, \"it\": int(LOESS_IT),\n",
        "                      \"degree\": int(degree), \"cv_grid\": list(map(float, FRAC_GRID))},\n",
        "            \"rng_seed\": int(RNG_SEED),\n",
        "            \"export_all_curves\": bool(EXPORT_ALL_CURVES),\n",
        "            \"show_errors\": show_errors,\n",
        "            \"weighting\": {\"mode\": mode, \"alpha95_to_sigma\": \"sigma_y = alpha95/1.96\",\n",
        "                          \"sigma_eff\": \"sigma_y^2 + (dy/dx)^2 * sigma_x^2\", \"scikit_misc_available\": bool(USE_SKMISC)},\n",
        "            \"band_type\": \"Simultaneous 95%\",\n",
        "            \"simultaneous_c95\": c95\n",
        "        }\n",
        "        meta_path = \"loess_bootstrap_metadata.json\"\n",
        "        with open(meta_path, \"w\") as f: json.dump(meta, f, indent=2)\n",
        "\n",
        "        with plot_out:\n",
        "            plot_out.clear_output(wait=True)\n",
        "            plt.figure(figsize=(8,5))\n",
        "            plt.fill_between(age_grid, simul_lo, simul_hi, alpha=0.25, label=\"95% simultaneous\")\n",
        "            label_mean = \"LOESS mean (weighted)\" if not mode.startswith(\"Equal\") else \"LOESS mean\"\n",
        "            plt.plot(age_grid, mean_curve, linewidth=2, label=label_mean)\n",
        "            if show_errors:\n",
        "                plt.errorbar(df[\"age\"].values, df[\"paleolatitude\"].values,\n",
        "                             xerr=df[\"age_err\"].values, yerr=(df[\"paleolatitude_err\"].values/1.96),\n",
        "                             fmt='o', markersize=4, capsize=2, linewidth=1, label=\"Data ±1σ (x & y)\")\n",
        "            plt.xlabel(\"age\"); plt.ylabel(\"paleolatitude\")\n",
        "            plt.title(f\"LOESS bootstrap (degree={degree}, frac={frac_star:.2f}): mean with 95% simultaneous band\")\n",
        "            plt.legend(); plt.tight_layout()\n",
        "            png_path = \"loess_bootstrap_plot.png\"\n",
        "            plt.savefig(png_path, dpi=200)\n",
        "            plt.show()\n",
        "\n",
        "        pdf_path = \"loess_bootstrap_report.pdf\"\n",
        "        with PdfPages(pdf_path) as pdf:\n",
        "            fig1 = plt.figure(figsize=(8,5))\n",
        "            plt.fill_between(age_grid, simul_lo, simul_hi, alpha=0.25, label=\"95% simultaneous\")\n",
        "            plt.plot(age_grid, mean_curve, linewidth=2, label=label_mean)\n",
        "            if show_errors:\n",
        "                plt.errorbar(df[\"age\"].values, df[\"paleolatitude\"].values,\n",
        "                             xerr=df[\"age_err\"].values, yerr=df[\"paleolatitude_err\"].values/1.96,\n",
        "                             fmt='o', markersize=4, capsize=2, linewidth=1, label=\"Data ±1σ (x & y)\")\n",
        "            plt.xlabel(\"age\"); plt.ylabel(\"paleolatitude\")\n",
        "            plt.title(f\"LOESS bootstrap (degree={degree}, frac={frac_star:.2f}): mean with 95% simultaneous band\")\n",
        "            plt.legend(); plt.tight_layout()\n",
        "            pdf.savefig(fig1); plt.close(fig1)\n",
        "\n",
        "            fig2 = plt.figure(figsize=(8.5, 11)); plt.axis('off')\n",
        "            text = (\n",
        "                \"LOESS Bootstrap Report — Column Explanations (English)\\n\\n\"\n",
        "                \"Input columns (CSV):\\n\"\n",
        "                \"  • age: numeric age of the observation (units as provided in the CSV).\\n\"\n",
        "                \"  • age_err: 1σ age uncertainty (same units as 'age').\\n\"\n",
        "                \"  • paleolatitude: observed paleolatitude (degrees).\\n\"\n",
        "                \"  • paleolatitude_err: alpha95 (95% confidence radius); converted to 1σ via alpha95/1.96 when needed.\\n\\n\"\n",
        "                \"Processing steps:\\n\"\n",
        "                \"  1) Gaussian bootstrap (N_BOOT replicas): draw age* ~ N(age, age_err), paleo* ~ N(paleolatitude, alpha95/1.96).\\n\"\n",
        "                \"  2) LOESS smoothing with selectable degree (1 or 2) and frac (Auto via CV, or Manual),\\n\"\n",
        "                \"     mapped to a common age grid via PCHIP (shape-preserving).\\n\"\n",
        "                \"  3) Simultaneous 95% band via bootstrap max normalized deviation across the grid.\\n\\n\"\n",
        "                \"Output columns — loess_bootstrap_summary.csv:\\n\"\n",
        "                \"  • age_grid: common age grid.\\n\"\n",
        "                \"  • loess_mean / loess_median / loess_std: ensemble statistics across replicas.\\n\"\n",
        "                \"  • simul95_lo / simul95_hi: 95% simultaneous band bounds at each grid age.\\n\"\n",
        "                \"  • n_replicas_valid: number of replicas with finite values across the grid.\\n\\n\"\n",
        "                \"Weighting:\\n\"\n",
        "                \"  • Equal: all weights = 1.\\n\"\n",
        "                \"  • Data-driven: w = 1 / [ (alpha95/1.96)^2 + (dy/dx)^2 * age_err^2 ], slope from preliminary LOESS.\\n\"\n",
        "                \"  • Custom: user-supplied weights from CSV ('weight' column).\\n\"\n",
        "            )\n",
        "            plt.text(0.02, 0.98, text, va='top', ha='left', fontsize=10, family='monospace', wrap=True)\n",
        "            pdf.savefig(fig2); plt.close(fig2)\n",
        "\n",
        "        btn_dl_summary.disabled = btn_dl_curves.disabled = btn_dl_meta.disabled = btn_dl_pdf.disabled = btn_dl_png.disabled = False\n",
        "        with status_out:\n",
        "            clear_output(wait=True)\n",
        "            print(\"Analysis completed. Use the buttons below to download outputs on demand.\")\n",
        "            if not USE_SKMISC and degree == 2:\n",
        "                print(\"Notice: scikit-misc not available — requested degree=2 fell back to unweighted linear LOESS.\")\n",
        "    except Exception as e:\n",
        "        with status_out: print(\"Error:\", repr(e))\n",
        "    finally:\n",
        "        btn.disabled = False\n",
        "\n",
        "def on_reset_clicked(btn):\n",
        "    global summary_path, curves_path, meta_path, pdf_path, png_path\n",
        "    summary_path = curves_path = meta_path = pdf_path = png_path = None\n",
        "    btn_dl_summary.disabled = btn_dl_curves.disabled = btn_dl_meta.disabled = btn_dl_pdf.disabled = btn_dl_png.disabled = True\n",
        "    try: upload_weights_btn.value.clear()\n",
        "    except Exception: pass\n",
        "    plt.close('all'); plot_out.clear_output(wait=True)\n",
        "    with status_out:\n",
        "        clear_output(wait=True)\n",
        "        print(\"State reset. You can rerun the analysis with new settings.\")\n",
        "\n",
        "def on_dl_summary_clicked(b):\n",
        "    if summary_path: _safe_download(summary_path)\n",
        "def on_dl_curves_clicked(b):\n",
        "    if curves_path:  _safe_download(curves_path)\n",
        "def on_dl_meta_clicked(b):\n",
        "    if meta_path:    _safe_download(meta_path)\n",
        "def on_dl_pdf_clicked(b):\n",
        "    if pdf_path:     _safe_download(pdf_path)\n",
        "def on_dl_png_clicked(b):\n",
        "    if png_path:     _safe_download(png_path)\n",
        "\n",
        "run_button.on_click(on_run_clicked)\n",
        "reset_button.on_click(on_reset_clicked)\n",
        "btn_dl_summary.on_click(on_dl_summary_clicked)\n",
        "btn_dl_curves.on_click(on_dl_curves_clicked)\n",
        "btn_dl_meta.on_click(on_dl_meta_clicked)\n",
        "btn_dl_pdf.on_click(on_dl_pdf_clicked)\n",
        "btn_dl_png.on_click(on_dl_png_clicked)"
      ],
      "metadata": {
        "id": "rLabUJgA4FUh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 920,
          "referenced_widgets": [
            "fe0963403a9d480f814a903056382e8e",
            "ebe510c33a3e4a41a4890b0a824f2f35",
            "f60d5c9b6ecf4d5fa2f863bcd7e3fde6",
            "2704451b17eb43aab936cad61fb09f5c",
            "c221b6bd75074e85af4d8c74512e8472",
            "3b0586782be94a36b617fe4e4836ac9b",
            "1f5f3e894a8948d292f28efbf65f1260",
            "a9c3b4efe2ee455fb6afdede39624f55",
            "f0576a2982874d529acf9f9fa3195030",
            "90fd30fa9d8f4193bb230697e787afca",
            "8503f8b659cc421e806cf6c45e8569f6",
            "ec34d0b827b649c5b630c52b6aa54321",
            "7fd0b66dcdf349fd81f17ed641c00c2b",
            "10012c5d923d4270a06e037ee63c9283",
            "6852f2a1d9334b73bd082102729511b5",
            "2bb554f25f8e4f039fdba37444a2dc18",
            "47d2868806d24b4ba2685aa31e05cfa9",
            "5ad3953a6b4a48fdb3f89af03309ca20",
            "a3870ec63dd041f3b6dbdb4f1eb7d154",
            "56b1e9c51e57427d91e78e1178a63b44",
            "f6b38a4debc6452a97d36ccaf5e9fc33",
            "8e4c839c4ed149459a809163957664bd",
            "7ec3051b63654a6e9de8bd555d3076fa",
            "1fda23d82e2d47bbbdca9e4883fda18e",
            "ae5f745c46b44afc9f78bbf9cc54fb68",
            "11edad66ef4a46f6b27a74f8f0b0eef7",
            "76fd12bc06f14060a22bc299f39788e3",
            "6539a745f5a34a3f862cef7d9e71f86c",
            "be010fff6c5a4943af98fb757e394016",
            "028af83192844f33891186d9771d3cc3",
            "a3eaa1535d17434a97ed34b7ce8ee92f",
            "551359b2a0094ee4bad8bb6432e258b0",
            "5191da3601c040b297f0bd34c1cb71c9",
            "5ba87295b0a74189afb50ac5a4de592f",
            "2284a145069543e2869de6be334f9bb0",
            "264cb49358044c5cb95f8986ca9e461d",
            "4f3fffd69a11451196b874e0b4c5f8fe",
            "8524c26f09fb4713947e46c8051db443",
            "2775ecf1114a49e3875d486cd33b9f57",
            "f8a9c8da0f354ecbad65d2fa69f962f5",
            "0c13847f90d448d495bea17ae3cabcfb",
            "fe958b27dd854613b9e2410f933a50af",
            "ac1a396ff22746e781e2b47d8cd6d03f",
            "0301af4d7c344a879699e060d0b38e30",
            "a2757e0966524406a0013369d5b4d41f",
            "3cac7932220d443e8bb86f04c0e02460",
            "eab969e7bdd144d487b75ed47ced00e5",
            "a8532681cffa434fb8279109f4e0d0ab",
            "6d9aad73b4d24032bd88de8dae6020a6",
            "7d7dc3f19c564eafb1259d60f94693aa",
            "52eb6bc004664cd29bb48c8a0aca2630",
            "bed20cb8af0249368ff0b07203e62c55"
          ]
        },
        "outputId": "808dead8-987b-4979-8da8-196714cef41f"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload a CSV with columns: age, age_err, paleolatitude, paleolatitude_err (alpha95).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-1fe76264-57e6-442e-b9d4-6cfec5d910e3\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-1fe76264-57e6-442e-b9d4-6cfec5d910e3\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving demo_paleolatitude_input_var.csv to demo_paleolatitude_input_var (6).csv\n",
            "\n",
            "Loaded file: demo_paleolatitude_input_var (6).csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       age  age_err  paleolatitude  paleolatitude_err\n",
              "0   65.018    0.879         13.416              2.033\n",
              "1  110.944    1.101         13.810             12.656\n",
              "2  188.251    1.337         16.043              1.508\n",
              "3  254.290    1.638         17.186              1.536\n",
              "4  334.437    1.780         20.194              1.975"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33b2e4b0-5e1b-480f-801c-9544bb9192f9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>age_err</th>\n",
              "      <th>paleolatitude</th>\n",
              "      <th>paleolatitude_err</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>65.018</td>\n",
              "      <td>0.879</td>\n",
              "      <td>13.416</td>\n",
              "      <td>2.033</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>110.944</td>\n",
              "      <td>1.101</td>\n",
              "      <td>13.810</td>\n",
              "      <td>12.656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>188.251</td>\n",
              "      <td>1.337</td>\n",
              "      <td>16.043</td>\n",
              "      <td>1.508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>254.290</td>\n",
              "      <td>1.638</td>\n",
              "      <td>17.186</td>\n",
              "      <td>1.536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>334.437</td>\n",
              "      <td>1.780</td>\n",
              "      <td>20.194</td>\n",
              "      <td>1.975</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33b2e4b0-5e1b-480f-801c-9544bb9192f9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-33b2e4b0-5e1b-480f-801c-9544bb9192f9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-33b2e4b0-5e1b-480f-801c-9544bb9192f9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4121cfde-3b08-4a2c-9e58-7613e8b4e1e3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4121cfde-3b08-4a2c-9e58-7613e8b4e1e3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4121cfde-3b08-4a2c-9e58-7613e8b4e1e3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"btn_dl_png\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.24385988359802,\n        \"min\": 65.018,\n        \"max\": 334.437,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          110.944,\n          334.437,\n          188.251\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age_err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3714195740668496,\n        \"min\": 0.879,\n        \"max\": 1.78,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.101,\n          1.78,\n          1.337\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paleolatitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7562200928082645,\n        \"min\": 13.416,\n        \"max\": 20.194,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13.81,\n          20.194,\n          16.043\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paleolatitude_err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.877508513575349,\n        \"min\": 1.508,\n        \"max\": 12.656,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12.656,\n          1.975,\n          1.508\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HBox(children=(ToggleButton(value=True, description='Show data with error bars'), BoundedIntText(value=1000, d…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fe0963403a9d480f814a903056382e8e"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HBox(children=(Dropdown(description='Frac mode:', options=('Auto (CV)', 'Manual'), value='Auto (CV)'), FloatSl…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6852f2a1d9334b73bd082102729511b5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Output()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "551359b2a0094ee4bad8bb6432e258b0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Output()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5ba87295b0a74189afb50ac5a4de592f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HBox(children=(Button(description='Download summary CSV', disabled=True, style=ButtonStyle()), Button(descript…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "264cb49358044c5cb95f8986ca9e461d"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}