{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPB0XAQ2L19jDv3r2ICPqPZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pangeab-blip/EvGeo-Exercises/blob/main/Plat_curve\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "# Colab — LOESS bootstrap (English I/O) with WEIGHTS + RESET + on-demand downloads\n",
        "# Features:\n",
        "# - CSV input: age, age_err, paleolatitude, paleolatitude_err   (paleolatitude_err interpreted as alpha95)\n",
        "# - Weighting modes: Equal / Data-driven (age_err & alpha95) / Custom uploaded weights\n",
        "# - Toggle raw error bars; control N_BOOT\n",
        "# - frac selected once via K-fold CV; PCHIP mapping to common grid\n",
        "# - Outputs: summary CSV, curves CSV, metadata JSON, vector PDF (plot + column explanations)\n",
        "# - No auto-downloads: buttons to download files\n",
        "#\n",
        "# If needed, install packages:\n",
        "# !pip -q install statsmodels ipywidgets scikit-misc\n",
        "\n",
        "import io, json, numpy as np, pandas as pd, matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import KFold\n",
        "from scipy.interpolate import PchipInterpolator\n",
        "from matplotlib.backends.backend_pdf import PdfPages\n",
        "from IPython.display import display, clear_output\n",
        "import ipywidgets as widgets\n",
        "from google.colab import files\n",
        "\n",
        "# Optional imports (handled gracefully)\n",
        "USE_SKMISC = True\n",
        "try:\n",
        "    from skmisc.loess import loess as SK_LOESS\n",
        "except Exception as _:\n",
        "    USE_SKMISC = False\n",
        "from statsmodels.nonparametric.smoothers_lowess import lowess as SM_LOWESS\n",
        "\n",
        "# =============== 1) Upload data CSV ===============\n",
        "print(\"Please upload a CSV with columns: age, age_err, paleolatitude, paleolatitude_err (alpha95).\")\n",
        "uploaded = files.upload()\n",
        "filename = list(uploaded.keys())[0]\n",
        "df = pd.read_csv(io.BytesIO(uploaded[filename]))\n",
        "print(f\"\\nLoaded file: {filename}\")\n",
        "display(df.head())\n",
        "\n",
        "# =============== 2) Validate / preprocess ===============\n",
        "required = {\"age\",\"age_err\",\"paleolatitude\",\"paleolatitude_err\"}\n",
        "missing = required - set(df.columns)\n",
        "if missing:\n",
        "    raise ValueError(f\"Missing required columns: {missing}\")\n",
        "if (df[\"age_err\"] < 0).any() or (df[\"paleolatitude_err\"] < 0).any():\n",
        "    raise ValueError(\"Uncertainties must be non-negative.\")\n",
        "if len(df) < 3:\n",
        "    raise ValueError(\"At least three observations are required for LOESS.\")\n",
        "\n",
        "df = df.copy()\n",
        "for c in [\"age\",\"age_err\",\"paleolatitude\",\"paleolatitude_err\"]:\n",
        "    df[c] = pd.to_numeric(df[c], errors=\"coerce\")\n",
        "df = df.dropna(subset=[\"age\",\"age_err\",\"paleolatitude\",\"paleolatitude_err\"])\n",
        "df = df.sort_values(\"age\").reset_index(drop=True)\n",
        "\n",
        "# =============== 3) UI widgets ===============\n",
        "toggle_errors = widgets.ToggleButton(value=True, description=\"Show data with error bars\")\n",
        "nboot_input = widgets.BoundedIntText(value=1000, min=100, max=20000, step=100, description=\"N_BOOT:\")\n",
        "\n",
        "weight_mode = widgets.Dropdown(\n",
        "    options=[\"Equal (all 1.0)\", \"Data-driven (age_err & alpha95)\", \"Custom (upload weights CSV)\"],\n",
        "    value=\"Equal (all 1.0)\",\n",
        "    description=\"Weights:\"\n",
        ")\n",
        "upload_weights_btn = widgets.FileUpload(accept=\".csv\", multiple=False, description=\"Upload weights CSV\")\n",
        "run_button = widgets.Button(description=\"Run analysis\", button_style=\"primary\")\n",
        "reset_button = widgets.Button(description=\"Reset\", button_style=\"warning\")\n",
        "status_out = widgets.Output()\n",
        "\n",
        "# Download buttons (disabled initially)\n",
        "btn_dl_summary = widgets.Button(description=\"Download summary CSV\", disabled=True)\n",
        "btn_dl_curves  = widgets.Button(description=\"Download curves CSV\", disabled=True)\n",
        "btn_dl_meta    = widgets.Button(description=\"Download metadata JSON\", disabled=True)\n",
        "btn_dl_pdf     = widgets.Button(description=\"Download PDF report\", disabled=True)\n",
        "btn_dl_png     = widgets.Button(description=\"Download plot PNG\", disabled=True)\n",
        "\n",
        "top_row = widgets.HBox([toggle_errors, nboot_input, weight_mode])\n",
        "mid_row = widgets.HBox([upload_weights_btn, run_button, reset_button])\n",
        "downloads_box = widgets.HBox([btn_dl_summary, btn_dl_curves, btn_dl_meta, btn_dl_pdf, btn_dl_png])\n",
        "display(top_row, mid_row, status_out, downloads_box)\n",
        "\n",
        "# =============== 4) Fixed params ===============\n",
        "LOESS_IT = 1\n",
        "GRID_SIZE = 300\n",
        "RNG_SEED = 42\n",
        "DO_CV = True\n",
        "FRAC_GRID = np.linspace(0.20, 0.80, 13)\n",
        "K_FOLDS = 5\n",
        "RANDOM_STATE_CV = 123\n",
        "SAVE_FIG = True\n",
        "EXPORT_ALL_CURVES = True\n",
        "\n",
        "age_min = float(df[\"age\"].min())\n",
        "age_max = float(df[\"age\"].max())\n",
        "age_grid = np.linspace(age_min, age_max, GRID_SIZE)\n",
        "\n",
        "# Paths (set after run)\n",
        "summary_path = curves_path = meta_path = pdf_path = png_path = None\n",
        "\n",
        "# =============== 5) Utilities ===============\n",
        "def cv_select_frac(x, y, frac_values, k_folds=5, it=1, random_state=0):\n",
        "    \"\"\"Pick frac minimizing out-of-sample RMSE via K-fold CV, using SM lowess + PCHIP.\"\"\"\n",
        "    if len(x) < max(k_folds,5):\n",
        "        return None\n",
        "    kf = KFold(n_splits=k_folds, shuffle=True, random_state=random_state)\n",
        "    rmse_mean = []\n",
        "    for frac in frac_values:\n",
        "        errs = []\n",
        "        for tr, te in kf.split(x):\n",
        "            xt, yt = x[tr], y[tr]\n",
        "            xv, yv = x[te], y[te]\n",
        "            if xt.size < 3 or np.unique(xt).size < 3:\n",
        "                continue\n",
        "            ys_t = SM_LOWESS(yt, xt, frac=frac, it=it, return_sorted=False)\n",
        "            ordt = np.argsort(xt)\n",
        "            pchip = PchipInterpolator(xt[ordt], ys_t[ordt], extrapolate=True)\n",
        "            yhat = pchip(xv)\n",
        "            errs.append(float(np.sqrt(np.mean((yv - yhat)**2))))\n",
        "        rmse_mean.append(np.inf if not errs else np.mean(errs))\n",
        "    return float(frac_values[int(np.argmin(rmse_mean))])\n",
        "\n",
        "def preliminary_slope(x, y, frac, it):\n",
        "    \"\"\"Unweighted preliminary LOESS to estimate dy/dx at each original x.\"\"\"\n",
        "    ys = SM_LOWESS(y, x, frac=frac, it=it, return_sorted=False)\n",
        "    # finite differences on sorted x\n",
        "    order = np.argsort(x)\n",
        "    xs = x[order]; ys_s = ys[order]\n",
        "    # central differences\n",
        "    slope = np.empty_like(xs)\n",
        "    slope[1:-1] = (ys_s[2:] - ys_s[:-2]) / (xs[2:] - xs[:-2])\n",
        "    slope[0] = (ys_s[1] - ys_s[0]) / (xs[1] - xs[0])\n",
        "    slope[-1] = (ys_s[-1] - ys_s[-2]) / (xs[-1] - xs[-2])\n",
        "    # return in original order\n",
        "    inv = np.empty_like(order)\n",
        "    inv[order] = np.arange(order.size)\n",
        "    return slope[inv]\n",
        "\n",
        "def build_weights(mode, custom_weights_file, x, sigma_x, y_alpha95):\n",
        "    \"\"\"Compute per-point weights depending on mode. alpha95 is converted to 1σ via /1.96.\"\"\"\n",
        "    n = x.size\n",
        "    if mode.startswith(\"Equal\"):\n",
        "        w = np.ones(n, dtype=float)\n",
        "        return w\n",
        "    if mode.startswith(\"Custom\"):\n",
        "        if custom_weights_file is None:\n",
        "            raise ValueError(\"Custom weights mode selected but no weights CSV uploaded.\")\n",
        "        # Expect one column named 'weight'\n",
        "        cwdf = pd.read_csv(io.BytesIO(custom_weights_file[next(iter(custom_weights_file))][\"content\"]))\n",
        "        if \"weight\" not in cwdf.columns:\n",
        "            raise ValueError(\"Custom weights CSV must contain a column named 'weight'.\")\n",
        "        w = cwdf[\"weight\"].astype(float).values\n",
        "        if w.size != n:\n",
        "            raise ValueError(f\"Custom weights length {w.size} differs from data length {n}.\")\n",
        "        return w\n",
        "\n",
        "    # Data-driven: use alpha95 and age_err via error propagation\n",
        "    # Convert alpha95 (95% C.I.) to 1σ\n",
        "    sigma_y = (y_alpha95.astype(float)) / 1.96\n",
        "    # Need dy/dx: obtain with preliminary unweighted LOESS using CV-selected frac (or default)\n",
        "    frac0 = cv_select_frac(x, df[\"paleolatitude\"].values.astype(float), FRAC_GRID, k_folds=K_FOLDS, it=LOESS_IT, random_state=RANDOM_STATE_CV)\n",
        "    if frac0 is None or not np.isfinite(frac0):\n",
        "        frac0 = 0.4\n",
        "    dy_dx = preliminary_slope(x, df[\"paleolatitude\"].values.astype(float), frac=frac0, it=LOESS_IT)\n",
        "    sigma_eff2 = sigma_y**2 + (dy_dx**2) * (sigma_x**2)\n",
        "    eps = 1e-12\n",
        "    w = 1.0 / np.maximum(sigma_eff2, eps)\n",
        "    # Normalize weights to mean 1 (optional, keeps scale comparable)\n",
        "    w *= (len(w) / w.sum())\n",
        "    return w\n",
        "\n",
        "def loess_weighted_to_grid(x, y, w, grid, frac, it):\n",
        "    \"\"\"Weighted LOESS → PCHIP on 'grid'. Uses scikit-misc if available; falls back to statsmodels unweighted.\"\"\"\n",
        "    if x.size < 3 or np.allclose(x, x[0]):\n",
        "        return np.full_like(grid, np.nan, dtype=float)\n",
        "    if USE_SKMISC:\n",
        "        mdl = SK_LOESS(x, y, weights=w, span=frac, degree=1, family=\"gaussian\", surface=\"direct\")\n",
        "        mdl.fit()\n",
        "        y_sm = mdl.predict(x, stderror=False).values\n",
        "    else:\n",
        "        # Fallback (no weights applied)\n",
        "        y_sm = SM_LOWESS(y, x, frac=frac, it=it, return_sorted=False)\n",
        "    ord_idx = np.argsort(x)\n",
        "    xs = x[ord_idx]; ys = y_sm[ord_idx]\n",
        "    pchip = PchipInterpolator(xs, ys, extrapolate=True)\n",
        "    return pchip(grid).astype(float)\n",
        "\n",
        "def _safe_download(path):\n",
        "    try:\n",
        "        files.download(path)\n",
        "    except Exception as e:\n",
        "        with status_out:\n",
        "            print(f\"Cannot download {path}:\", repr(e))\n",
        "\n",
        "# =============== 6) Run handler ===============\n",
        "def on_run_clicked(btn):\n",
        "    global summary_path, curves_path, meta_path, pdf_path, png_path\n",
        "    with status_out:\n",
        "        clear_output(wait=True)\n",
        "        print(\"Analysis started…\")\n",
        "        if not USE_SKMISC:\n",
        "            print(\"Note: scikit-misc not available. Falling back to unweighted LOESS (weights ignored).\")\n",
        "    btn.disabled = True\n",
        "\n",
        "    try:\n",
        "        show_errors = bool(toggle_errors.value)\n",
        "        N_BOOT = int(nboot_input.value)\n",
        "        mode = str(weight_mode.value)\n",
        "\n",
        "        x0 = df[\"age\"].values.astype(float)\n",
        "        y0 = df[\"paleolatitude\"].values.astype(float)\n",
        "        sx = df[\"age_err\"].values.astype(float)                 # assumed 1σ\n",
        "        a95 = df[\"paleolatitude_err\"].values.astype(float)      # alpha95\n",
        "\n",
        "        # frac via CV once (on original data)\n",
        "        frac_star = cv_select_frac(x0, y0, FRAC_GRID, k_folds=K_FOLDS, it=LOESS_IT, random_state=RANDOM_STATE_CV)\n",
        "        if frac_star is None or not np.isfinite(frac_star):\n",
        "            frac_star = 0.4\n",
        "\n",
        "        # Build weights (original data order). For bootstrap, reuse same weights (based on measured uncertainties).\n",
        "        custom_file = upload_weights_btn.value if mode.startswith(\"Custom\") else None\n",
        "        w0 = build_weights(mode, custom_file, x0, sx, a95)\n",
        "\n",
        "        with status_out:\n",
        "            print(f\"Selected LOESS frac (CV): {frac_star:.3f}\")\n",
        "            print(f\"Weighting mode: {mode}\")\n",
        "            if mode.startswith(\"Custom\"):\n",
        "                print(\"Custom weights loaded.\")\n",
        "            print(f\"Bootstrap replicas (N_BOOT): {N_BOOT}\")\n",
        "\n",
        "        rng = np.random.default_rng(RNG_SEED)\n",
        "        curves = np.empty((N_BOOT, age_grid.size), dtype=float)\n",
        "\n",
        "        # Bootstrap: jitter age & paleo using their uncertainties; weights kept fixed per original uncertainties\n",
        "        for b in range(N_BOOT):\n",
        "            xb = rng.normal(loc=x0, scale=sx)\n",
        "            yb = rng.normal(loc=y0, scale=(a95/1.96))  # jitter y using 1σ from alpha95\n",
        "            curves[b, :] = loess_weighted_to_grid(xb, yb, w0, age_grid, frac=frac_star, it=LOESS_IT)\n",
        "\n",
        "        # Filter pathological replicas\n",
        "        valid_mask = np.isfinite(curves).all(axis=1)\n",
        "        curves = curves[valid_mask]\n",
        "        if curves.shape[0] == 0:\n",
        "            raise RuntimeError(\"No valid replicas: check uncertainties or LOESS parameters.\")\n",
        "\n",
        "        # Pointwise stats\n",
        "        mean_curve   = np.nanmean(curves, axis=0)\n",
        "        median_curve = np.nanmedian(curves, axis=0)\n",
        "        std_curve    = np.nanstd(curves, axis=0, ddof=1)\n",
        "        p16, p84     = np.nanpercentile(curves, [16, 84], axis=0)\n",
        "        p025, p975   = np.nanpercentile(curves, [2.5, 97.5], axis=0)\n",
        "\n",
        "        # Save CSVs\n",
        "        summary = pd.DataFrame({\n",
        "            \"age_grid\": age_grid,\n",
        "            \"loess_mean\": mean_curve,\n",
        "            \"loess_median\": median_curve,\n",
        "            \"loess_std\": std_curve,\n",
        "            \"loess_p16\": p16,\n",
        "            \"loess_p84\": p84,\n",
        "            \"loess_p2_5\": p025,\n",
        "            \"loess_p97_5\": p975,\n",
        "            \"n_replicas_valid\": curves.shape[0]\n",
        "        })\n",
        "        summary_path = \"loess_bootstrap_summary.csv\"\n",
        "        summary.to_csv(summary_path, index=False)\n",
        "\n",
        "        curves_path = None\n",
        "        if EXPORT_ALL_CURVES:\n",
        "            curves_df = pd.DataFrame(curves.T, columns=[f\"rep_{i+1:04d}\" for i in range(curves.shape[0])])\n",
        "            curves_df.insert(0, \"age_grid\", age_grid)\n",
        "            curves_path = \"loess_bootstrap_curves.csv\"\n",
        "            curves_df.to_csv(curves_path, index=False)\n",
        "\n",
        "        # Metadata JSON\n",
        "        meta = {\n",
        "            \"input_file\": filename,\n",
        "            \"n_points\": int(len(df)),\n",
        "            \"n_boot\": int(N_BOOT),\n",
        "            \"n_boot_valid\": int(curves.shape[0]),\n",
        "            \"grid_size\": int(GRID_SIZE),\n",
        "            \"age_min\": float(age_min), \"age_max\": float(age_max),\n",
        "            \"loess\": {\"frac\": float(frac_star), \"it\": int(LOESS_IT), \"cv_used\": bool(DO_CV),\n",
        "                      \"frac_grid\": list(map(float, FRAC_GRID)), \"k_folds\": int(K_FOLDS)},\n",
        "            \"rng_seed\": int(RNG_SEED),\n",
        "            \"export_all_curves\": bool(EXPORT_ALL_CURVES),\n",
        "            \"show_errors\": show_errors,\n",
        "            \"plot_band\": \"95% only\",\n",
        "            \"weights\": {\"mode\": mode, \"notes\": \"alpha95 converted to 1σ via /1.96; σ_eff^2=σ_y^2+(dy/dx)^2·σ_x^2 for data-driven.\"},\n",
        "            \"scikit_misc_available\": bool(USE_SKMISC)\n",
        "        }\n",
        "        meta_path = \"loess_bootstrap_metadata.json\"\n",
        "        with open(meta_path, \"w\") as f:\n",
        "            json.dump(meta, f, indent=2)\n",
        "\n",
        "        # Plot (95% band only + mean)\n",
        "        plt.figure(figsize=(8,5))\n",
        "        plt.fill_between(age_grid, p025, p975, alpha=0.25, label=\"95% interval\")\n",
        "        plt.plot(age_grid, mean_curve, linewidth=2, label=\"LOESS mean (weighted)\" if not mode.startswith(\"Equal\") else \"LOESS mean\")\n",
        "        if show_errors:\n",
        "            plt.errorbar(df[\"age\"].values, df[\"paleolatitude\"].values,\n",
        "                         xerr=df[\"age_err\"].values, yerr=(df[\"paleolatitude_err\"].values/1.96),\n",
        "                         fmt='o', markersize=4, capsize=2, linewidth=1, label=\"Data ±1σ (x & y)\")\n",
        "        plt.xlabel(\"age\"); plt.ylabel(\"paleolatitude\")\n",
        "        ttl = \"LOESS bootstrap (95% band)\"\n",
        "        if mode.startswith(\"Data-driven\"): ttl += \" — weighted by age_err & alpha95\"\n",
        "        elif mode.startswith(\"Custom\"):     ttl += \" — custom weights\"\n",
        "        plt.title(ttl); plt.legend(); plt.tight_layout()\n",
        "        png_path = \"loess_bootstrap_plot.png\"\n",
        "        plt.savefig(png_path, dpi=200)\n",
        "        plt.show()\n",
        "\n",
        "        # Vector PDF (plot + column explanations)\n",
        "        pdf_path = \"loess_bootstrap_report.pdf\"\n",
        "        with PdfPages(pdf_path) as pdf:\n",
        "            fig1 = plt.figure(figsize=(8,5))\n",
        "            plt.fill_between(age_grid, p025, p975, alpha=0.25, label=\"95% interval\")\n",
        "            plt.plot(age_grid, mean_curve, linewidth=2, label=\"LOESS mean (weighted)\" if not mode.startswith(\"Equal\") else \"LOESS mean\")\n",
        "            if show_errors:\n",
        "                plt.errorbar(df[\"age\"].values, df[\"paleolatitude\"].values,\n",
        "                             xerr=df[\"age\"].values*0 + df[\"age_err\"].values,\n",
        "                             yerr=df[\"paleolatitude_err\"].values/1.96,\n",
        "                             fmt='o', markersize=4, capsize=2, linewidth=1, label=\"Data ±1σ (x & y)\")\n",
        "            plt.xlabel(\"age\"); plt.ylabel(\"paleolatitude\")\n",
        "            plt.title(ttl); plt.legend(); plt.tight_layout()\n",
        "            pdf.savefig(fig1); plt.close(fig1)\n",
        "\n",
        "            fig2 = plt.figure(figsize=(8.5, 11)); plt.axis('off')\n",
        "            text = (\n",
        "                \"LOESS Bootstrap Report — Column Explanations (English)\\n\\n\"\n",
        "                \"Input columns (CSV):\\n\"\n",
        "                \"  • age: numeric age of the observation (units as provided in the CSV).\\n\"\n",
        "                \"  • age_err: 1σ age uncertainty (same units as 'age').\\n\"\n",
        "                \"  • paleolatitude: observed paleolatitude (degrees).\\n\"\n",
        "                \"  • paleolatitude_err: alpha95 (95% confidence radius); converted to 1σ via alpha95/1.96 when needed.\\n\\n\"\n",
        "                \"Processing steps:\\n\"\n",
        "                \"  1) Gaussian bootstrap (N_BOOT replicas): draw age* ~ N(age, age_err), paleo* ~ N(paleolatitude, alpha95/1.96).\\n\"\n",
        "                \"  2) Each replica is LOESS-smoothed (frac chosen once via K-fold cross-validation on original data).\\n\"\n",
        "                \"  3) Smoothed curves are mapped to a common age grid via PCHIP interpolation.\\n\"\n",
        "                \"  4) Pointwise statistics across replicas are computed.\\n\\n\"\n",
        "                \"Output columns — loess_bootstrap_summary.csv:\\n\"\n",
        "                \"  • age_grid: common age grid.\\n\"\n",
        "                \"  • loess_mean: pointwise mean of smoothed replicas.\\n\"\n",
        "                \"  • loess_median: pointwise median.\\n\"\n",
        "                \"  • loess_std: pointwise standard deviation across replicas.\\n\"\n",
        "                \"  • loess_p16 / loess_p84: 68% interval bounds.\\n\"\n",
        "                \"  • loess_p2_5 / loess_p97_5: 95% interval bounds.\\n\"\n",
        "                \"  • n_replicas_valid: number of replicas with finite values across the grid.\\n\\n\"\n",
        "                \"Weighting:\\n\"\n",
        "                \"  • Equal: all weights = 1.\\n\"\n",
        "                \"  • Data-driven: per-point weights w = 1 / [ (alpha95/1.96)^2 + (dy/dx)^2 * age_err^2 ], with dy/dx from a preliminary unweighted LOESS.\\n\"\n",
        "                \"  • Custom: user-supplied weights from CSV ('weight' column).\\n\"\n",
        "            )\n",
        "            plt.text(0.02, 0.98, text, va='top', ha='left', fontsize=10, family='monospace', wrap=True)\n",
        "            pdf.savefig(fig2); plt.close(fig2)\n",
        "\n",
        "        # Enable downloads\n",
        "        btn_dl_summary.disabled = btn_dl_curves.disabled = btn_dl_meta.disabled = btn_dl_pdf.disabled = btn_dl_png.disabled = False\n",
        "        with status_out:\n",
        "            clear_output(wait=True)\n",
        "            print(\"Analysis completed. Use the buttons below to download outputs on demand.\")\n",
        "            if not USE_SKMISC:\n",
        "                print(\"Note: scikit-misc not available — weights were ignored (unweighted LOESS fallback).\")\n",
        "\n",
        "    except Exception as e:\n",
        "        with status_out:\n",
        "            print(\"Error:\", repr(e))\n",
        "    finally:\n",
        "        btn.disabled = False\n",
        "\n",
        "# =============== 7) Reset handler ===============\n",
        "def on_reset_clicked(btn):\n",
        "    global summary_path, curves_path, meta_path, pdf_path, png_path\n",
        "    summary_path = curves_path = meta_path = pdf_path = png_path = None\n",
        "    btn_dl_summary.disabled = btn_dl_curves.disabled = btn_dl_meta.disabled = btn_dl_pdf.disabled = btn_dl_png.disabled = True\n",
        "    upload_weights_btn.value.clear() if hasattr(upload_weights_btn.value, \"clear\") else None\n",
        "    with status_out:\n",
        "        clear_output(wait=True)\n",
        "        print(\"State reset. You can rerun the analysis with new settings.\")\n",
        "\n",
        "# =============== 8) Download handlers ===============\n",
        "def on_dl_summary_clicked(b):\n",
        "    if summary_path: _safe_download(summary_path)\n",
        "def on_dl_curves_clicked(b):\n",
        "    if curves_path:  _safe_download(curves_path)\n",
        "def on_dl_meta_clicked(b):\n",
        "    if meta_path:    _safe_download(meta_path)\n",
        "def on_dl_pdf_clicked(b):\n",
        "    if pdf_path:     _safe_download(pdf_path)\n",
        "def on_dl_png_clicked(b):\n",
        "    if png_path:     _safe_download(png_path)\n",
        "\n",
        "run_button.on_click(on_run_clicked)\n",
        "reset_button.on_click(on_reset_clicked)\n",
        "btn_dl_summary.on_click(on_dl_summary_clicked)\n",
        "btn_dl_curves.on_click(on_dl_curves_clicked)\n",
        "btn_dl_meta.on_click(on_dl_meta_clicked)\n",
        "btn_dl_pdf.on_click(on_dl_pdf_clicked)\n",
        "btn_dl_png.on_click(on_dl_png_clicked)"
      ],
      "metadata": {
        "id": "rLabUJgA4FUh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}